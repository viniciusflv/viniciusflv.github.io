---
const chart = Astro.props.chart;
---

<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>

<script>
  const nodes = document.querySelectorAll('[data-mermaid]');
  Array.from(nodes).forEach((node) => {
    node.innerHTML = node.getAttribute('data-mermaid') || '';
    node.className = 'mermaid';
  });
</script>

{
  Astro.slots.default ? (
    <div class="grid xl:grid-cols-2 gap-8 items-start">
      <slot />
      <div data-mermaid={chart} />
    </div>
  ) : (
    <div data-mermaid={chart} />
  )
}

<style is:global>
  .mermaid {
    .edgePaths * {
      @apply dark:!stroke-dark-green;
    }

    .edgeLabel {
      @apply dark:!bg-dark-background;
    }

    .marker,
    marker * {
      :not(#ZERO_OR_MORE_START, #ZERO_OR_MORE_END) {
        @apply dark:!fill-dark-green;
      }

      @apply dark:!stroke-dark-green;
    }

    circle {
      @apply dark:!fill-dark-darkest;
    }

    #crosshead * {
      @apply dark:!stroke-dark-green;
    }

    line,
    .relationshipLine {
      @apply dark:!stroke-dark-green;

      &[id^='actor'] {
        @apply dark:!stroke-dark-cyan;
      }
    }

    .nodes {
      a {
        &:hover {
          .node * {
            @apply dark:!stroke-dark-cyan !stroke-dark-red;
          }
        }
      }
      .state-start,
      .state-end,
      .fork-join {
        @apply dark:!stroke-dark-orange;
      }
    }

    .node *,
    .actor,
    .entityBox,
    .relationshipLabelBox,
    .attributeBoxEven,
    .attributeBoxOdd {
      @apply dark:!fill-dark-background
      dark:!stroke-dark-currentLine;
    }

    .cluster *,
    .statediagram-cluster * {
      @apply dark:!fill-dark-darkest
      dark:!stroke-dark-currentLine;
    }

    .actor *,
    .messageText,
    .entityLabel,
    .relationshipLabel {
      @apply dark:!fill-dark-cyan;
    }

    [class^='activation'] {
      @apply dark:!fill-dark-orange;
    }

    * {
      @apply dark:!text-dark-cyan;
    }
  }
</style>
