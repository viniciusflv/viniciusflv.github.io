---
import mermaidParse from "mermaid-parse";

const { chart } = Astro.props;
let svg = chart;
try {
  svg = await mermaidParse(chart, { extension: "svg" });
} catch (error) {
  svg = (error as Error).message;
}
---

<picture class="mermaid" set:html={svg} />

<style is:global>
  .mermaid-container {
    @apply flex flex-wrap lg:flex-nowrap gap-4 w-full;
  }

  .mermaid {
    @apply flex w-full overflow-y-auto;

    .dark & {
      .edgePaths * {
        @apply !stroke-dracula-green;
      }

      .edgeLabel {
        @apply !bg-dracula-background;
      }

      .marker,
      marker * {
        :not(#ZERO_OR_MORE_START, #ZERO_OR_MORE_END) {
          @apply !fill-dracula-green;
        }

        @apply !stroke-dracula-green;
      }

      circle:not([class^="actor"]):not(.commit) {
        @apply !fill-dracula-darkest;
        @apply !stroke-dracula-cyan;

        &.face {
          @apply !stroke-dracula-cyan;
        }
      }

      .mouth {
        @apply !stroke-dracula-cyan;
      }

      #crosshead * {
        @apply !stroke-dracula-green;
      }

      line,
      .relationshipLine {
        @apply !stroke-dracula-green;

        &[id^="actor"] {
          @apply !stroke-dracula-cyan;
        }
      }

      .nodes {
        a {
          &:hover {
            .node * {
              @apply !stroke-dracula-cyan !stroke-dracula-red;
            }
          }
        }
        .state-start,
        .state-end,
        .fork-join {
          @apply !stroke-dracula-orange;
        }
      }

      .node *,
      .actor,
      .entityBox,
      .relationshipLabelBox,
      .attributeBoxEven,
      .attributeBoxOdd,
      .task,
      .reqBox,
      .reqLabelBox,
      .commit-label-bkg {
        @apply !fill-dracula-background
      !stroke-dracula-currentLine !opacity-100;

        &[class^="task crit"] {
          @apply !fill-dracula-red;
        }

        &[class^="task active"] {
          @apply !fill-dracula-cyan;
        }

        &[class^="task activeCrit"] {
          @apply !fill-dracula-orange;
        }
      }

      .today {
        @apply !stroke-dracula-orange;
      }

      .cluster *,
      .statediagram-cluster *,
      .journey-section {
        @apply !fill-dracula-darkest
      !stroke-dracula-currentLine;
      }

      .actor *,
      .messageText,
      .entityLabel,
      .relationshipLabel {
        @apply !fill-dracula-cyan;
      }

      [class^="activation"] {
        @apply !fill-dracula-orange;
      }

      text:not(.taskText),
      .legend {
        &:not(.slice):not(.commit-label) {
          @apply !fill-dracula-cyan;
        }

        .row {
          @apply fill-white;
        }
      }

      * {
        @apply !text-dracula-cyan;
      }
    }
  }
</style>
